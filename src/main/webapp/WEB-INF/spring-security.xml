<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                    http://www.springframework.org/schema/security
                    http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<global-method-security pre-post-annotations="enabled" />

	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userDetailsServiceRef" />
	</authentication-manager>
	
	<beans:bean id="userDetailsServiceRef" class="com.tonearena.security.AuthorizationDetailService"/>

	<http auto-config="false" use-expressions="true" entry-point-ref="restAuthenticationEntryPoint" create-session="stateless">
		    <intercept-url pattern="/song/**" access="hasRole('ROLE_USER')"/>
	        <intercept-url pattern="/**" access="hasRole('ROLE_ANONYMOUS')"/>
	        <custom-filter ref="jwtTokenFilter" position="FORM_LOGIN_FILTER"/>
	</http>

	<beans:bean id="jwtTokenFilter" class="com.tonearena.security.StatelessAuthenticationFilter">
	</beans:bean>
	
	<!--
	<beans:bean id="authenticationService" class="com.tonearena.security.TokenAuthenticationService">
		<beans:constructor-arg type="java.lang.String"><beans:value>tooManySecrets</beans:value></beans:constructor-arg>
		<beans:constructor-arg ref="userDetailsService"/>
	</beans:bean>
	  -->

</beans:beans>